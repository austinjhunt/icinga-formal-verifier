*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 17:41:52 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver.
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- specification ( G ((checkAttempts = maxCheckAttempts & type = SOFT) & prevMode = mode) -> next(type) = HARD) IN service is true
-- specification  G (next(prevMode) != mode -> next(checkAttempts) = 1) IN service is true
-- specification ( G ( F mode != next(mode)) ->  G ((type = HARD & checkAttempts = maxCheckAttempts) -> ((type = HARD & checkAttempts = maxCheckAttempts) U (type = SOFT & checkAttempts = 1)))) IN service is true
-- invariant checkAttempts <= maxCheckAttempts IN service is true
-- invariant (res = 0 <-> next(mode) = OK) IN service is true
-- invariant (res = 1 <-> next(mode) = WARN) IN service is true
-- invariant (res = 2 <-> next(mode) = CRIT) IN service is true
-- invariant (res = 3 <-> next(mode) = UNKNOWN) IN service is true
-- invariant (type = HARD -> checkAttempts = maxCheckAttempts) IN service is true
-- invariant ((type = HARD & checkAttempts = maxCheckAttempts) -> ((next(type) = SOFT & next(checkAttempts) = 1) | (next(type) = HARD & next(checkAttempts) = checkAttempts))) IN service is true
