-- module for symbolically model checking the Icinga 2 satellite component
-- as modeled in the README of this folder
MODULE main
    VAR satellite : satelliteModule ;

MODULE satelliteModule
    VAR
        -- whether satellite is ready to begin monitoring
        readyToMonitor: boolean;

        -- use a "newDeployment" boolean state variable to represent
        -- whether a new deployment input from the master is present at a given round
        newDeployment: boolean;

        -- model the configuration deployment input as a state variable
        deployedConfigId: 0 .. 1024;
        -- model the local configuration with as an integer, representing a unique config id
        -- should be updated to match deployedConfigId when one is received
        localConfigId: 0 .. 1024;

        -- current mode of operation
        mode: {STARTING, MONITORING};


        -- state variable indicating which checkable is being checked on current round (only relevant for MONITORING)
        -- if in STARTING, checkable=NONE
        -- this would be part of the config but is being abstracted into its own state var to address a specification
        checkable: {HOST, SERVICE, NONE};

        -- check result of most recent check execution; could be a result for a host or service
        checkResult: {NONE, HostCheckResult, ServiceCheckResult};

    INIT -- initial states ;
        -- not ready to monitor, in starting mode
        -- initialize localConfigId to 0 (abstract, could be some base config or no config)
        (readyToMonitor = FALSE & mode = STARTING & localConfigId = 0 & checkable = NONE & checkResult = NONE);

    TRANS
        -- starting up, not ready, no new deployment
        ((mode = STARTING & !readyToMonitor & !newDeployment) -> next(mode) = STARTING & next(localConfigId) = localConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = readyToMonitor & next(checkable) = NONE & next(checkResult) = NONE) &

        -- starting up, not ready, new deployment
        ((mode = STARTING & !readyToMonitor & newDeployment) -> next(mode) = STARTING & next(localConfigId) = deployedConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = TRUE  & next(checkable) = NONE & next(checkResult) = NONE) &

        -- starting up, ready to monitor, no new deployment
        ((mode = STARTING & readyToMonitor & !newDeployment) -> next(mode) = MONITORING & next(localConfigId) = localConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = readyToMonitor &
            ((next(checkable) = HOST & next(checkResult) = HostCheckResult) | ((next(checkable) = SERVICE & next(checkResult) = ServiceCheckResult)))) &

        -- starting up, ready to monitor, AND new deployment; restart
        ((mode = STARTING & readyToMonitor & newDeployment) -> next(mode) = STARTING & next(localConfigId) = deployedConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = TRUE  & next(checkable) = NONE & next(checkResult) = NONE) &

        -- currently monitoring AND not ready is unreachable
        -- ((mode = MONITORING & !readyToMonitor & !newDeployment) -> next(mode) = STARTING & next(localConfigId) = localConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = readyToMonitor) &
        -- ((mode = MONITORING  & !readyToMonitor & newDeployment) ->  ) &

        -- currently monitoring and ready to monitor and no new deployment; keep monitoring
        ((mode = MONITORING & readyToMonitor & !newDeployment) -> next(mode) = MONITORING & next(localConfigId) = localConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = readyToMonitor &
            ((next(checkable) = HOST & next(checkResult) = HostCheckResult) | ((next(checkable) = SERVICE & next(checkResult) = ServiceCheckResult)))) &

        -- currently monitoring and ready to monitor and new deployment; go back to starting, no longer ready, new deployment remains true for next round
        ((mode = MONITORING  & readyToMonitor & newDeployment) -> next(mode) = STARTING & next(localConfigId) = localConfigId & next(deployedConfigId) = deployedConfigId & next(readyToMonitor) = FALSE & next(newDeployment) = newDeployment & next(checkable) = NONE & next(checkResult) = NONE);

    INVARSPEC
        -- A satellite that is currently monitoring MUST be ready to monitor (however, a satellite ready to monitor may not be in monitoring mode)  i.e. currently monitoring AND not ready is unreachable
        (mode = MONITORING -> readyToMonitor);

    INVARSPEC
        -- A satellite should always restart itself whenever a new configuration is deployed (but a satellite may self-loop in STARTING even without newDeployment, so no <->)
        newDeployment -> next(mode) = STARTING;

    LTLSPEC
        -- Assuming there is always eventually a new deployment, then if a satellite is MONITORING, it should stay MONITORING until the new deployment arrives (because in order to use U q as a spec, q has to happen)
       G F newDeployment -> G (mode = MONITORING -> mode = MONITORING U newDeployment);

    LTLSPEC
        -- Assuming there is always eventually a new deployment, a satellite's next config stay the same UNTIL it re-enters STARTING due to a new deployment
        G F newDeployment -> G (next(localConfigId) = localConfigId U (mode=STARTING & newDeployment));

    INVARSPEC
        --  A satellite should never enter a monitoring state after a deployment until its config matches that new deployment i.e. when in MONITORING, the localconfig must be equal to the last deployed config BUT the localconfig is set to match the deployment while in STARTING, so the reverse implication is not true.
        mode = MONITORING -> localConfigId = deployedConfigId;

    INVARSPEC
        -- a satellite in MONITORING mode should always be outputting some type of check result (<-> applies; checkresult != None means MONITORING mode active)
        mode = MONITORING <-> checkResult != NONE;

    INVARSPEC
        -- A satellite in MONITORING mode should always output a host check result when a host checkable is checked (<-> applies)
        mode = MONITORING & checkable = HOST <-> checkResult = HostCheckResult;

    INVARSPEC
        -- A satellite in MONITORING mode should always output a service check result when a service checkable is checked (<-> applies)
        mode = MONITORING & checkable = SERVICE <-> checkResult = ServiceCheckResult;



MODULE HostCheckResult
    VAR
        type: {HARD, SOFT};
        state: {UP, DOWN};

MODULE ServiceCheckResult
    VAR
        type: {HARD, SOFT};
        state: {OK, WARN, CRIT, UNKNOWN};
