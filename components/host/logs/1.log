huntaj-imac:icinga-formal-verifier huntaj$ ./nuxmv components/host/test.smv
*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 17:41:52 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver.
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- invariant checkAttempts <= maxCheckAttempts IN host is true
-- invariant ((res = 0 | res = 1) <-> next(mode) = UP) IN host is true
-- invariant ((res = 2 | res = 3) <-> next(mode) = DOWN) IN host is true
-- invariant ((checkAttempts = maxCheckAttempts & type = SOFT) -> next(type) = HARD) IN host is false
-- as demonstrated by the following execution sequence
Trace Description: AG alpha Counterexample
Trace Type: Counterexample
  -> State: 1.1 <-
    host.checkAttempts = 0
    host.res = 0
    host.mode = PENDING
    host.type = PENDING
    host.maxCheckAttempts = 3
  -> State: 1.2 <-
    host.checkAttempts = 1
    host.mode = UP
    host.type = SOFT
  -> State: 1.3 <-
    host.checkAttempts = 2
  -> State: 1.4 <-
    host.checkAttempts = 3
    host.res = 2
  -> State: 1.5 <-
    host.checkAttempts = 1
    host.res = 0
    host.mode = DOWN

# This indicates that I need a new constraint.
 The next type doesn't have to be HARD if you don't constrain the res to maintaining its current value.
 If the response code changes at the last minute, you don't ever reach the hard state.
 Add constraint that maintains the res value for this invariant.